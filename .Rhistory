myBalVal1 <- c("re74")
## Specify the values to try for rho1
r1s <- c(0.01, 0.02, 0.03, 0.1, 0.5, 1, 1.5, 2, 2.5, 4, 5,6,7,8,9, 10)
## Specify the values to try for rho2
r2s <- c(1)
tempResult11 <- multiObjMatch(lalonde, treatVal1 , responseVal1 , pairDistVal1 , exactVal1, myBalVal1, rho1=r1s, rho2=r2s, propensityCols = psCols, pScores = NULL, idCol = NULL, maxUnMatched = 0.1, caliperOption=0.25, toleranceOption=1e-1, maxIter=3, rho.max.f = 10)
generate_tv_graph(tempResult11)
compare_matching(tempResult11)
bal.tab(lalonde[,pairDistVal1], treat = as.vector(lalonde$treat))
generate_pairdistance_graph(tempResult11)
generate_pairdistance_balance_graph(tempResult11)
psCols2 <- c("age", "educ", "race", "married")
## Specify the name of treatment variable
treatVal12 <- "treat"
## Specify the name of response variable
responseVal12 <- "re78"
## Specify the list of variable names used for calculating the pairwise distance
pairDistVal12 <- c('age',"married",'educ', 'nodegree')
## Specify the column for exact matching
exactVal12 <- c("educ")
## Specify the column for measuring balance in algorithm
myBalVal12 <- c("re74")
## Specify the values to try for rho1
r1s2 <- c(0:20, 100)*0.1
## Specify the values to try for rho2
r2s2 <- c(0:20, 100)*0.1
## Specify the values to try for rho1
r1s <- c(0:20,100, 200, 300, 400)*0.1
## Specify the values to try for rho2
r2s <- c(0:20, 100, 200, 300, 400)*0.1
tempResult2 <- multiObjMatch(lalonde, treatVal12 , responseVal12 , pairDistVal12 , exactVal12, myBalVal12, rho1=r1s2, rho2=r2s2, propensityCols = psCols2, pScores = NULL, idCol = NULL, maxUnMatched = 0.1, caliperOption=0.25, toleranceOption=1e-1, maxIter=0, rho.max.f = 10)
psCols2 <- c("age", "educ", "race", "married")
## Specify the name of treatment variable
treatVal12 <- "treat"
## Specify the name of response variable
responseVal12 <- "re78"
## Specify the list of variable names used for calculating the pairwise distance
pairDistVal12 <- c('age',"married",'educ', 'nodegree')
## Specify the column for exact matching
exactVal12 <- c("educ")
## Specify the column for measuring balance in algorithm
myBalVal12 <- c("re74")
## Specify the values to try for rho1
r1s <- c(0.01, 0.02, 0.03, 0.1, 0.5, 1, 1.5, 2, 2.5, 4, 5,6,7,8,9, 10)
## Specify the values to try for rho2
r2s <- c(1)
tempResult2 <- multiObjMatch(lalonde, treatVal12 , responseVal12 , pairDistVal12 , exactVal12, myBalVal12, rho1=r1s2, rho2=r2s2, propensityCols = psCols2, pScores = NULL, idCol = NULL, maxUnMatched = 0.1, caliperOption=0.25, toleranceOption=1e-1, maxIter=0, rho.max.f = 10)
generate_tv_graph(tempResult2)
compare_matching(tempResult2)
bal.tab(lalonde[,pairDistVal12], treat = as.vector(lalonde$treat))
generate_pairdistance_graph(tempResult2)
generate_pairdistance_balance_graph(tempResult2)
psCols2 <- c("age", "educ", "race", "married")
## Specify the name of treatment variable
treatVal12 <- "treat"
## Specify the name of response variable
responseVal12 <- "re78"
## Specify the list of variable names used for calculating the pairwise distance
pairDistVal12 <- c('age',"married",'educ', 'nodegree')
## Specify the column for exact matching
exactVal12 <- c("educ")
## Specify the column for measuring balance in algorithm
myBalVal12 <- c("re74")
## Specify the values to try for rho1
r1s <- c(0.01, 0.02, 0.03, 0.1, 0.5, 1, 1.5, 2, 2.5, 4, 5,6,7,8,9, 10)
## Specify the values to try for rho2
r2s <- c(1)
tempResult2 <- multiObjMatch(lalonde, treatVal12 , responseVal12 , pairDistVal12 , exactVal12, myBalVal12, rho1=r1s, rho2=r2s, propensityCols = psCols2, pScores = NULL, idCol = NULL, maxUnMatched = 0.1, caliperOption=0.25, toleranceOption=1e-1, maxIter=0, rho.max.f = 10)
generate_tv_graph(tempResult2)
compare_matching(tempResult2)
bal.tab(lalonde[,pairDistVal12], treat = as.vector(lalonde$treat))
generate_pairdistance_graph(tempResult2)
generate_pairdistance_balance_graph(tempResult2)
ex16 <- matched_data(tempResult2, 16)
ex7 <- matched_data(tempResult2, 7)
hist(ex10[ex16$z == 1, "ps"], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution for Matched Pairs",
xlim = c(0, 1), ylim = c(0, 5))
hist(ex16[ex16$z == 1, "ps"], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution for Matched Pairs",
xlim = c(0, 1), ylim = c(0, 5))
ps2 <- predict(glm(treat~age+educ+race+married,data=lalonde, family=binomial("logit")), type="response")
hist(ps2[ex16$z == 1], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution for Matched Pairs",
xlim = c(0, 1), ylim = c(0, 5))
ps2[ex16$z == 1]
tempResult2$matchList$`16`
hist(ps2[ex16$treat == 1], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution for Matched Pairs",
xlim = c(0, 1), ylim = c(0, 5))
hist(ps2[ex16$treat == 0], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
hist(ps2[lalonde$treat==1], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution",
xlim = c(0, 1), ylim = c(0, 5))
hist(ps2[lalonde$treat==0], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
hist(ps2[lalonde$treat==1], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution",
xlim = c(0, 1), ylim = c(0, 10))
hist(ps2[lalonde$treat==0], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
hist(ps2[lalonde$treat==1], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution",
xlim = c(0, 1), ylim = c(0, 12))
hist(ps2[lalonde$treat==0], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
hist(ps2[lalonde$treat==1], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution",
xlim = c(0, 1), ylim = c(0, 15))
hist(ps2[lalonde$treat==0], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
hist(ps2[ex7$treat == 1], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution for Matched Pairs",
xlim = c(0, 1), ylim = c(0, 5))
hist(ps2[ex7$treat == 0], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
hist(ps2[ex7$treat == 1], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution for Matched Pairs",
xlim = c(0, 1), ylim = c(0, 10))
hist(ps2[ex7$treat == 0], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
border = NA, xlab = "estimated propensity score",
hist(ps2[ex7$treat == 1], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution for Matched Pairs",
xlim = c(0, 1), ylim = c(0, 15))
hist(ps2[ex7$treat == 0], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
## Example Match 31: Propensity Score Examination
ex16 <- matched_data(tempResult2, 16)
ex7 <- matched_data(tempResult2, 7)
hist(ps2[ex16$treat == 1], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution for Matched Pairs",
xlim = c(0, 1), ylim = c(0, 15))
hist(ps2[ex16$treat == 0], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
hist(ps2[lalonde$treat==1], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution",
xlim = c(0, 1), ylim = c(0, 15))
hist(ps2[lalonde$treat==0], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
hist(ps2[ex7$treat == 1], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution for Matched Pairs",
xlim = c(0, 1), ylim = c(0, 15))
hist(ps2[ex7$treat == 0], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
generate_pairdistance_graph(tempResult2)
setwd("~/Desktop/SHICHAO/College/MultiObjMatch/MultiObjMatch")
library(devtools)
load_all()
document()
library(MultiObjMatch)
help(generate_tv_graph)
help(multiObjMatch)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(survival)
set.seed(491)
t <- seq(0, 200, 0.01)
## pexp: gives cdf
S0 <- function(t) 1 - pexp(t, rate = 1/60)
Ht <- (1/60) * t
gg_S0 <- qplot(x = t, y = S0(t), geom="line") + ggtitle("True Survival Curve")
print(gg_S0)
G_0 <- function(t) pweibull(t, shape=2, scale=80)
gg_G0 <- qplot(x = t, y = G_0(t), geom = "line") + ggtitle("True Censoring CDF")
print(gg_G0)
T <- rexp(n = 1000, rate = 1/60)
C <- rweibull(n = 1000, shape = 2, scale = 80)
C <- ifelse(C > 100, 100, C)
Ttilde <- pmin(T,C)
Delta <- T <= C
T
Tilde
Ttilde
Ttilde
Delta
C
S_obj <- survival::Surv(time = Ttilde, event = Delta, type = "right")
km <- survival::survfit(formula = S_obj ~ 1, type = "kaplan-meier", conf.int = .95)
Event
S_obj
Delta
time
time
Ttilde
library(devtools)
install_github("ShichaoHan/MultiObjMatch")
install_github("ShichaoHan/MultiObjMatch")
help(generate_tv_graph)
library(MultiObjMatch)
library(MultiObjMatch)
help(generate_tv_graph)
library(devtools)
install_github("ShichaoHan/MultiObjMatch")
library(MultiObjMatch)
?multiObjMatch
?getUnmatched
library(devtools)
library(MultiObjMatch)
install_github("ShichaoHan/MultiObjMatch")
library(MultiObjMatch)
?multiObjMatch
library(MultiObjMatch)
?multiObjMatch
devtools::document()
library(MultiObjMatch)
?multiObjMatch
setwd("~/Desktop/SHICHAO/College/STATSC245B/query")
knitr::opts_chunk$set(echo = TRUE)
library(survival)
library(ranger)
library(ggplot2)
library(dplyr)
library(ggfortify)
dat = read.csv("sp_info.csv")
newdat = read.csv("facts_df.csv")
x = vector()
for (i in 1:dim(dat)[1])
{
if (sum(dat$spid[i]==newdat$spid)==1){
x = c(x, i)
}
}
dat = dat[x, ]
status = rep(0, dim(dat)[1])
status[dat$spdied=="1 YES"] = 1
time = (dat$year_left-dat$year_enter)
newdat$status = status
newdat$time = time
km_fit = survfit(Surv(time, status) ~ 1, data = newdat)
autoplot(km_fit)
km_fit = survfit(Surv(time, status) ~ Treat, data = newdat)
autoplot(km_fit)
cox <- coxph(Surv(time, status) ~  ., data = newdat)
cox_fit <- survfit(cox)
autoplot(cox_fit)
summary(cox_fit)
cox_fit
summary(cox_fit)
cox
cox$coefficients
head(newdat)
cox$coefficients
cox$wald.test
confint(coxph)
confint(cox)
res.cox.sum <- summary(cox)$coefficients
res.cox.sum
res.cox.sum[,5]
2.607573e-01
cox <- coxph(Surv(time, status) ~  Treat., data = newdat)
cox <- coxph(Surv(time, status) ~  treat., data = newdat)
head(newdat)
cox <- coxph(Surv(time, status) ~  Treat, data = newdat)
res.cox.sum <- summary(cox)$coefficients
res.cox.sum[,5]
head(newdat)
colnames(newdat)
colnames(newdat)[c(3:23)]
covs = colnames(newdat)[c(3:23)]
covs = colnames(newdat)[c(3:25)]
covs
covs = colnames(newdat)[c(3:25)]
covs = covs[covs!= "dnumchild"]
covs = colnames(newdat)[c(3:25)]
covs = covs[covs!= "dnumchild"]
cox <- coxph(Surv(time, status) ~  Treat, data = newdat[,covs])
res.cox.sum <- summary(cox)$coefficients
res.cox.sum[,5]
cox <- coxph(Surv(time, status) ~ ., data = newdat[,covs])
res.cox.sum <- summary(cox)$coefficients
res.cox.sum[,5]
pvals_cox = res.cox.sum[,5]
pvals_cox[pvals_cox <= 0.05]
res.cox.sum
data.frame(res.cox.sum)
write.csv(data.frame(res.cox.sum), "cox_model_result.csv")
install.packages("survtmle")
ftype <- newdat$status
ftime <- newdat$time
trt <- newdat$Treat
covs
covs[1:19]
adjCovs <- covs[1:19]
adjustVars <- newdat[, adjCovs]
library(SuperLearner)
?survtmle
library(survtmle)
?survtmle
ftype <- newdat$status
ftime <- newdat$time
trt <- newdat$Treat
adjCovs <- covs[1:19]
adjustVars <- newdat[, adjCovs]
fit1 <- survtmle(ftime = ftime, ftype = ftype, trt = trt, adjustVars=adjustVars, method="mean")
ftime
ftime <- newdat$time + 1
fit1 <- survtmle(ftime = ftime, ftype = ftype, trt = trt, adjustVars=adjustVars, method="mean")
fit1
ftype <- newdat$status
ftime <- newdat$time + 1
trt <- newdat$Treat
adjCovs <- covs[1:19]
adjustVars <- newdat[, adjCovs]
fit1 <- survtmle(ftime = ftime, ftype = ftype, trt = trt, adjustVars=adjustVars, method="hazard")
fit1
fit1 <- survtmle(ftime = ftime, ftype = ftype, trt = trt, adjustVars=adjustVars, method="hazard",t0 = 6)
fit1
tpfit <- timepoints(fit1, times = seq_len(6))
tpfit <- timepoints(fit1, times = seq_len(6))
```
tpfit
plot(tpfit)
tpfit
library(SuperLearner)
fit3 <- survtmle(ftime = ftime, ftype = ftype, trt = trt, adjustVars=adjustVars,SL.trt = c("SL.glm","SL.mean","SL.step"),
SL.ftime = c("SL.glm","SL.mean","SL.step"),
SL.ctime = c("SL.glm","SL.mean","SL.step"),
method="mean",t0 = 6)
fit3 <- survtmle(ftime = ftime, ftype = ftype, trt = trt, adjustVars=adjustVars,SL.trt = c("SL.glm","SL.mean","SL.step"),
SL.ftime = c("SL.glm","SL.mean","SL.step"),
SL.ctime = c("SL.glm","SL.mean","SL.step"),
method="hazard",t0 = 6)
ftype <- newdat$status
ftime <- newdat$time + 1
trt <- newdat$Treat
adjCovs <- covs[1:19]
adjustVars <- newdat[, adjCovs]
fit1 <- survtmle(ftime = ftime, ftype = ftype, trt = trt, adjustVars=adjustVars, method="hazard",t0 = 6)
fit1
tpfit <- timepoints(fit1, times = seq_len(6))
tpfit
plot(tpfit)
tpfit
cox_result <- read.csv( "cox_model_result.csv")
cox_result
cox_result[cox_result$Pr...z.. <= 0.05,]
cox_result <- read.csv( "cox_model_result.csv")
cox_result[cox_result$Pr...z.. <= 0.05,]
cox_result <- read.csv( "cox_model_result.csv")
cox_result[cox_result$Pr...z.. <= 0.05,]
nrow(cox_result)
cox_result[cox_result$Pr...z.. <= 0.05,]
cox_result
cox_result[cox_result$Pr...z.. <=0.05]
cox_result[cox_result$Pr...z.. <=0.05,]
dat_cox <- cox_result[cox_result$Pr...z.. <=0.05,]
dat_cox <- dat_cox[!is.na(dat_cox$z),]
dat_cox
options(digits = 5)
cox_result <- read.csv( "cox_model_result.csv")
dat_cox <- cox_result[cox_result$Pr...z.. <=0.05,]
dat_cox <- dat_cox[!is.na(dat_cox$z),]
dat_cox
dat_cox[,c(1,2,5)]
print(dat_cox[,c(1,2,5)])
print(dat_cox[,c(1,2,5)])
write.csv(dat_cox[,c(1,2,5)], "cox_select.csv")
write.csv(dat_cox[,c(1,2,5)], "cox_select.csv",digits = 5)
?write.csv
options(digits = 5)
cox_result <- read.csv( "cox_model_result.csv")
dat_cox <- cox_result[cox_result$Pr...z.. <=0.05,]
dat_cox <- dat_cox[!is.na(dat_cox$z),]
write.csv(dat_cox, "cox_select.csv")
znorm(0.95)
pnorm(0.95)
qnorm(0.95)
ftype <- newdat$status
ftime <- newdat$time + 1
trt <- newdat$Treat
adjCovs <- covs[1:19]
adjustVars <- newdat[, adjCovs]
fit1 <- survtmle(ftime = ftime, ftype = ftype, trt = trt, adjustVars=adjustVars, method="hazard",t0 = 6)
fit1
tpfit <- timepoints(fit1, times = seq_len(6))
tpfit
plot(tpfit)
tpfit
colnames(newdat)
result1 <- tmle(Y=time, A=newdat$Treat,W=newdat[, covs], Delta=newdat$status)
library(tmle)
result1 <- tmle(Y=time, A=newdat$Treat,W=newdat[, covs], Delta=newdat$status)
summary(result1)
newdat$time
summary(result1)
result1 <- tmle(Y=time>=5, A=newdat$Treat,W=newdat[, covs], Delta=newdat$status)
summary(result1)
result1 <- tmle(Y=time>=6, A=newdat$Treat,W=newdat[, covs], Delta=newdat$status)
summary(result1)
result2 <- tmle(Y=time>=5, A=newdat$Treat,W=newdat[, covs], Delta=newdat$status)
summary(result2)
result1 <- tmle(Y=time>=6, A=newdat$Treat,W=newdat[, covs], Delta=newdat$status)
summary(result1)
result3 <- tmle(Y=time, A=newdat$Treat,W=newdat[, covs], Delta=newdat$status)
summary(result3)
covs
covs = colnames(newdat)[3:22]
covs = covs[covs != "dnumchild"]
covs = covs[covs != "time"]
covs = covs[covs != "status"]
covs = covs[covs != "Treat"]
covs
result2 <- tmle(Y=time>=5, A=newdat$Treat,W=newdat[, covs], Delta=newdat$status)
summary(result2)
result3 <- tmle(Y=time, A=newdat$Treat,W=newdat[, covs], Delta=newdat$status)
summary(result3)
result1 <- tmle(Y=time>=6, A=newdat$Treat,W=newdat[, covs], Delta=newdat$status)
summary(result1)
covs
covs = covs[covs != "dracehisp"]
result2 <- tmle(Y=time>=5, A=newdat$Treat,W=newdat[, covs], Delta=newdat$status)
summary(result2)
covs
covs = covs[covs != "X2intvrage"]
result3 <- tmle(Y=time, A=newdat$Treat,W=newdat[, covs], Delta=newdat$status)
summary(result3)
covs = covs[covs != "X2intvrage"]
result3 <- tmle(Y=time, A=newdat$Treat,W=newdat[, covs], Delta=newdat$status)
summary(result3)
cosv
covs
covs = covs[covs != "X2intvrage"]
covs = covs[covs != "disescn1"]
covs = covs[covs != "disescn2"]
covs = covs[covs != "disescn3"]
result3 <- tmle(Y=time, A=newdat$Treat,W=newdat[, covs], Delta=newdat$status)
summary(result3)
result2 <- tmle(Y=time>=5, A=newdat$Treat,W=newdat[, covs], Delta=newdat$status)
summary(result2)
library(SuperLearner)
result2 <- tmle(Y=time>=5, A=newdat$Treat,W=newdat[, covs], Delta=newdat$status)
summary(result2)
?tmle
result3 <- tmle(Y=time, A=newdat$Treat,W=newdat[, covs], Delta=newdat$status)
summary(result3)
covs = colnames(newdat)[3:22]
covs = covs[covs != "dnumchild"]
covs = covs[covs != "time"]
covs = covs[covs != "status"]
covs = covs[covs != "Treat"]
result3 <- tmle(Y=time, A=newdat$Treat,W=newdat[, covs], Delta=newdat$status)
summary(result3)
cox_result <- read.csv( "cox_model_result.csv")
dat_cox <- cox_result[cox_result$Pr...z.. <=0.05,]
dat_cox <- dat_cox[!is.na(dat_cox$z),]
dat_cox
result2 <- tmle(Y=time>=5, A=newdat$Treat,W=newdat[, covs], Delta=newdat$status)
summary(result2)
result2 <- tmle(Y=time>=6, A=newdat$Treat,W=newdat[, covs], Delta=newdat$status)
summary(result2)
result2 <- tmle(Y=time>=4, A=newdat$Treat,W=newdat[, covs], Delta=newdat$status)
summary(result2)
0.005 - 1.96* 0.005
qnorm(-0.005)
qnorm(0.005/0.004)
pnorm(0.005/0.004, 0, 0,004)
pnorm(0.005/0.004, 0, 0.004)
pnorm(0.005/0.004, 0, 0.004)
0.009 - 0.005*1.95
0.009 + 0.005*1.95
0.008 - 0.005*1.95
0.008 + 0.005*1.95
pnorm(0.008/0.005)
2*(1 - pnorm(0.008/0.005))
2*(1 - pnorm(0.009/0.005))
-0.164 - 1.96*0.005
-0.164 + 1.96*0.005
-0.021 - 1.96*0.010
-0.021 + 1.96*0.010
2*pnorm(-0.164/0.005)
2*pnorm(-0.021/0.01)
