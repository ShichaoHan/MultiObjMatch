data = mat, family = "binomial"), type="response")
mat$ps = pscoreDKD
## Evaluate the propensity score distribution
jpeg(file="saving_plot1.jpeg")
hist(pscoreDKD[mat$z==1], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution",
xlim = c(0, 1), ylim = c(0, 5))
hist(pscoreDKD[mat$z==0], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
dev.off()
## Matching Algorithm Part
## Specify the name of treatment variable
treatVal1 <- "z"
## Specify the name of response variable
responseVal1 <- "y"
## Specify the list of variable names used for calculating the pairwise distance
pairDistVal1 <- c('age', 'micro', 'year','sex', "micro_number", "DR", "DPN")
## Specify the column for exact matching
exactVal1 <- c("days")
## Specify the column for measuring balance in algorithm
myBalVal1 <- c("days")
## Specify the values to try for rho1
r1s <- c(0.01, 0.02, 0.03, 1, 2, 4, 10)
## Specify the values to try for rho2
r2s <- c(1,2,3,4,5)
tempResult1 <- multiObjMatch(mat, treatVal1 , responseVal1 , pairDistVal1 , exactVal1, myBalVal1, rho1=r1s, rho2=r2s, propensityCols = NULL, pScores = "ps", idCol = NULL, maxUnMatched = 0.25, caliperOption=0.25, toleranceOption=1e-2, maxIter=1, rho.max.f = 10)
compare_matching(tempResult1)
generate_tv_graph(tempResult1)
compare_matching(tempResult1)
generate_tv_graph(tempResult1)
compare_matching(tempResult1)
generate_tv_graph(tempResult1)
generate_tv_graph(tempResult1)
compare_matching(tempResult1)
bal.tab(mat[,pairDistVal1], treat = as.vector(mat$z))
generate_tv_graph(tempResult1)
compare_matching(tempResult1)
bal.tab(mat[,pairDistVal1], treat = as.vector(mat$z))
generate_tv_graph(tempResult1)
compare_matching(tempResult1)
bal.tab(mat[,pairDistVal1], treat = as.vector(mat$z))
generate_pairdistance_graph(tempResult1)
generate_pairdistance_graph(tempResult1)
generate_pairdistance_balance_graph(tempResult1)
## Matching Algorithm Part
## Specify the name of treatment variable
treatVal1 <- "z"
## Specify the name of response variable
responseVal1 <- "y"
## Specify the list of variable names used for calculating the pairwise distance
pairDistVal1 <- c('age', 'micro', 'year','sex', "micro_number", "DR", "DPN")
## Specify the column for exact matching
exactVal1 <- c("days")
## Specify the column for measuring balance in algorithm
myBalVal1 <- c("days")
## Specify the values to try for rho1
r1s <- c(1)
## Specify the values to try for rho2
r2s <- c(1,2,3,4,5)
tempResult1 <- multiObjMatch(mat, treatVal1 , responseVal1 , pairDistVal1 , exactVal1, myBalVal1, rho1=r1s, rho2=r2s, propensityCols = NULL, pScores = "ps", idCol = NULL, maxUnMatched = 0.25, caliperOption=0.25, toleranceOption=1e-2, maxIter=1, rho.max.f = 10)
generate_tv_graph(tempResult1)
compare_matching(tempResult1)
bal.tab(mat[,pairDistVal1], treat = as.vector(mat$z))
## Matching Algorithm Part
## Specify the name of treatment variable
treatVal1 <- "z"
## Specify the name of response variable
responseVal1 <- "y"
## Specify the list of variable names used for calculating the pairwise distance
pairDistVal1 <- c('age', 'micro', 'year','sex', "micro_number", "DR", "DPN")
## Specify the column for exact matching
exactVal1 <- c("days")
## Specify the column for measuring balance in algorithm
myBalVal1 <- c("days")
## Specify the values to try for rho1
r1s <- c(1)
## Specify the values to try for rho2
r2s <- c(1:20)*0.1
tempResult1 <- multiObjMatch(mat, treatVal1 , responseVal1 , pairDistVal1 , exactVal1, myBalVal1, rho1=r1s, rho2=r2s, propensityCols = NULL, pScores = "ps", idCol = NULL, maxUnMatched = 0.25, caliperOption=0.25, toleranceOption=1e-2, maxIter=1, rho.max.f = 10)
generate_tv_graph(tempResult1)
compare_matching(tempResult1)
bal.tab(mat[,pairDistVal1], treat = as.vector(mat$z))
generate_pairdistance_graph(tempResult1)
generate_pairdistance_balance_graph(tempResult1)
## Matching Algorithm Part
## Specify the name of treatment variable
treatVal1 <- "z"
## Specify the name of response variable
responseVal1 <- "y"
## Specify the list of variable names used for calculating the pairwise distance
pairDistVal1 <- c('age', 'micro', 'year','sex', "micro_number", "DR", "DPN")
## Specify the column for exact matching
exactVal1 <- c("days")
## Specify the column for measuring balance in algorithm
myBalVal1 <- c("days")
## Specify the values to try for rho1
r1s <- c(0.01, 0.02, 0.03, 1, 2, 4, 10)
## Specify the values to try for rho2
r2s <- c(1)
tempResult1 <- multiObjMatch(mat, treatVal1 , responseVal1 , pairDistVal1 , exactVal1, myBalVal1, rho1=r1s, rho2=r2s, propensityCols = NULL, pScores = "ps", idCol = NULL, maxUnMatched = 0.25, caliperOption=0.25, toleranceOption=1e-2, maxIter=1, rho.max.f = 10)
generate_tv_graph(tempResult1)
compare_matching(tempResult1)
bal.tab(mat[,pairDistVal1], treat = as.vector(mat$z))
generate_pairdistance_graph(tempResult1)
## Matching Algorithm Part
## Specify the name of treatment variable
treatVal1 <- "z"
## Specify the name of response variable
responseVal1 <- "y"
## Specify the list of variable names used for calculating the pairwise distance
pairDistVal1 <- c('age', 'micro', 'year','sex', "micro_number", "DR", "DPN")
## Specify the column for exact matching
exactVal1 <- c("days")
## Specify the column for measuring balance in algorithm
myBalVal1 <- c("days")
## Specify the values to try for rho1
r1s <- c(0.01, 0.02, 0.03, 0.1, 0.5, 1, 2, 4, 6, 10)
## Specify the values to try for rho2
r2s <- c(1)
tempResult1 <- multiObjMatch(mat, treatVal1 , responseVal1 , pairDistVal1 , exactVal1, myBalVal1, rho1=r1s, rho2=r2s, propensityCols = NULL, pScores = "ps", idCol = NULL, maxUnMatched = 0.25, caliperOption=0.25, toleranceOption=1e-2, maxIter=1, rho.max.f = 10)
generate_tv_graph(tempResult1)
compare_matching(tempResult1)
bal.tab(mat[,pairDistVal1], treat = as.vector(mat$z))
generate_tv_graph(tempResult1)
compare_matching(tempResult1)
bal.tab(mat[,pairDistVal1], treat = as.vector(mat$z))
generate_pairdistance_graph(tempResult1)
generate_pairdistance_balance_graph(tempResult1)
hist(ex31[ex31$z == 1, "ps"], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution",
xlim = c(0, 1), ylim = c(0, 5))
ex10 <- matched_data(tempResult1, 10)
ex4 <- matched_data(tempResult1, 4)
hist(ex10[ex10$z == 1, "ps"], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution",
xlim = c(0, 1), ylim = c(0, 5))
hist(ex10[ex10$z == 0, "ps"], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
## Example Match 31: Propensity Score Examination
ex10 <- matched_data(tempResult1, 10)
ex4 <- matched_data(tempResult1, 4)
hist(ex10[ex10$z == 1, "ps"], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution for Matched Pairs",
xlim = c(0, 1), ylim = c(0, 5))
hist(ex10[ex10$z == 0, "ps"], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
jpeg(file="saving_plot1.jpeg")
hist(pscoreDKD[mat$z==1], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution",
xlim = c(0, 1), ylim = c(0, 5))
hist(pscoreDKD[mat$z==0], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
hist(ex10[ex10$z == 1, "ps"], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution for Matched Pairs",
xlim = c(0, 1), ylim = c(0, 5))
hist(ex10[ex10$z == 0, "ps"], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
hist(ex10[ex10$z == 1, "ps"], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution for Matched Pairs",
xlim = c(0, 1), ylim = c(0, 5))
hist(ex10[ex10$z == 0, "ps"], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
hist(pscoreDKD[mat$z==1], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution",
xlim = c(0, 1), ylim = c(0, 5))
hist(pscoreDKD[mat$z==0], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
hist(ex10[ex10$z == 1, "ps"], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution for Matched Pairs",
xlim = c(0, 1), ylim = c(0, 5))
hist(ex10[ex10$z == 0, "ps"], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
hist(pscoreDKD[mat$z==1], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution",
xlim = c(0, 1), ylim = c(0, 5))
hist(pscoreDKD[mat$z==0], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
hist(ex4[ex4$z == 1, "ps"], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution for Matched Pairs",
xlim = c(0, 1), ylim = c(0, 5))
hist(ex4[ex4$z == 0, "ps"], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
psCols <- c("age", "educ", "married", "nodegree")
## Specify the name of treatment variable
treatVal1 <- "treat"
## Specify the name of response variable
responseVal1 <- "re78"
## Specify the list of variable names used for calculating the pairwise distance
pairDistVal1 <- c('age',"married",'educ', 'nodegree')
## Specify the column for exact matching
exactVal1 <- c("educ")
## Specify the column for measuring balance in algorithm
myBalVal1 <- c("re74")
## Specify the values to try for rho1
r1s <- c(0.01, 0.02, 0.03, 0.1, 0.5, 1, 2, 4, 6, 10)
## Specify the values to try for rho2
r2s <- c(1)
tempResult11 <- multiObjMatch(lalonde, treatVal1 , responseVal1 , pairDistVal1 , exactVal1, myBalVal1, rho1=r1s, rho2=r2s, propensityCols = psCols, pScores = NULL, idCol = NULL, maxUnMatched = 0.1, caliperOption=0.25, toleranceOption=1e-1, maxIter=3, rho.max.f = 10)
generate_tv_graph(tempResult11)
compare_matching(tempResult11)
bal.tab(lalonde[,pairDistVal1], treat = as.vector(lalonde$treat))
generate_pairdistance_graph(tempResult11)
generate_pairdistance_balance_graph(tempResult11)
psCols2 <- c("age", "educ", "race", "married")
## Specify the name of treatment variable
treatVal12 <- "treat"
## Specify the name of response variable
responseVal12 <- "re78"
## Specify the list of variable names used for calculating the pairwise distance
pairDistVal12 <- c('age',"married",'educ', 'nodegree')
## Specify the column for exact matching
exactVal12 <- c("educ")
## Specify the column for measuring balance in algorithm
myBalVal12 <- c("re74")
## Specify the values to try for rho1
r1s2 <- c(0:20, 100)*0.1
## Specify the values to try for rho2
r2s2 <- c(0:20, 100)*0.1
## Specify the values to try for rho1
r1s <- c(0:20,100, 200, 300, 400)*0.1
## Specify the values to try for rho2
r2s <- c(0:20, 100, 200, 300, 400)*0.1
tempResult2 <- multiObjMatch(lalonde, treatVal12 , responseVal12 , pairDistVal12 , exactVal12, myBalVal12, rho1=r1s2, rho2=r2s2, propensityCols = psCols2, pScores = NULL, idCol = NULL, maxUnMatched = 0.1, caliperOption=0.25, toleranceOption=1e-1, maxIter=0, rho.max.f = 10)
psCols <- c("age", "educ", "married", "nodegree")
## Specify the name of treatment variable
treatVal1 <- "treat"
## Specify the name of response variable
responseVal1 <- "re78"
## Specify the list of variable names used for calculating the pairwise distance
pairDistVal1 <- c('age',"married",'educ', 'nodegree')
## Specify the column for exact matching
exactVal1 <- c("educ")
## Specify the column for measuring balance in algorithm
myBalVal1 <- c("re74")
## Specify the values to try for rho1
r1s <- c(0.01, 0.02, 0.03, 0.1, 0.5, 1, 1.5, 2, 2.5, 4, 5,6,7,8,9, 10)
## Specify the values to try for rho2
r2s <- c(1)
tempResult11 <- multiObjMatch(lalonde, treatVal1 , responseVal1 , pairDistVal1 , exactVal1, myBalVal1, rho1=r1s, rho2=r2s, propensityCols = psCols, pScores = NULL, idCol = NULL, maxUnMatched = 0.1, caliperOption=0.25, toleranceOption=1e-1, maxIter=3, rho.max.f = 10)
generate_tv_graph(tempResult11)
compare_matching(tempResult11)
bal.tab(lalonde[,pairDistVal1], treat = as.vector(lalonde$treat))
generate_pairdistance_graph(tempResult11)
generate_pairdistance_balance_graph(tempResult11)
psCols2 <- c("age", "educ", "race", "married")
## Specify the name of treatment variable
treatVal12 <- "treat"
## Specify the name of response variable
responseVal12 <- "re78"
## Specify the list of variable names used for calculating the pairwise distance
pairDistVal12 <- c('age',"married",'educ', 'nodegree')
## Specify the column for exact matching
exactVal12 <- c("educ")
## Specify the column for measuring balance in algorithm
myBalVal12 <- c("re74")
## Specify the values to try for rho1
r1s2 <- c(0:20, 100)*0.1
## Specify the values to try for rho2
r2s2 <- c(0:20, 100)*0.1
## Specify the values to try for rho1
r1s <- c(0:20,100, 200, 300, 400)*0.1
## Specify the values to try for rho2
r2s <- c(0:20, 100, 200, 300, 400)*0.1
tempResult2 <- multiObjMatch(lalonde, treatVal12 , responseVal12 , pairDistVal12 , exactVal12, myBalVal12, rho1=r1s2, rho2=r2s2, propensityCols = psCols2, pScores = NULL, idCol = NULL, maxUnMatched = 0.1, caliperOption=0.25, toleranceOption=1e-1, maxIter=0, rho.max.f = 10)
psCols2 <- c("age", "educ", "race", "married")
## Specify the name of treatment variable
treatVal12 <- "treat"
## Specify the name of response variable
responseVal12 <- "re78"
## Specify the list of variable names used for calculating the pairwise distance
pairDistVal12 <- c('age',"married",'educ', 'nodegree')
## Specify the column for exact matching
exactVal12 <- c("educ")
## Specify the column for measuring balance in algorithm
myBalVal12 <- c("re74")
## Specify the values to try for rho1
r1s <- c(0.01, 0.02, 0.03, 0.1, 0.5, 1, 1.5, 2, 2.5, 4, 5,6,7,8,9, 10)
## Specify the values to try for rho2
r2s <- c(1)
tempResult2 <- multiObjMatch(lalonde, treatVal12 , responseVal12 , pairDistVal12 , exactVal12, myBalVal12, rho1=r1s2, rho2=r2s2, propensityCols = psCols2, pScores = NULL, idCol = NULL, maxUnMatched = 0.1, caliperOption=0.25, toleranceOption=1e-1, maxIter=0, rho.max.f = 10)
generate_tv_graph(tempResult2)
compare_matching(tempResult2)
bal.tab(lalonde[,pairDistVal12], treat = as.vector(lalonde$treat))
generate_pairdistance_graph(tempResult2)
generate_pairdistance_balance_graph(tempResult2)
psCols2 <- c("age", "educ", "race", "married")
## Specify the name of treatment variable
treatVal12 <- "treat"
## Specify the name of response variable
responseVal12 <- "re78"
## Specify the list of variable names used for calculating the pairwise distance
pairDistVal12 <- c('age',"married",'educ', 'nodegree')
## Specify the column for exact matching
exactVal12 <- c("educ")
## Specify the column for measuring balance in algorithm
myBalVal12 <- c("re74")
## Specify the values to try for rho1
r1s <- c(0.01, 0.02, 0.03, 0.1, 0.5, 1, 1.5, 2, 2.5, 4, 5,6,7,8,9, 10)
## Specify the values to try for rho2
r2s <- c(1)
tempResult2 <- multiObjMatch(lalonde, treatVal12 , responseVal12 , pairDistVal12 , exactVal12, myBalVal12, rho1=r1s, rho2=r2s, propensityCols = psCols2, pScores = NULL, idCol = NULL, maxUnMatched = 0.1, caliperOption=0.25, toleranceOption=1e-1, maxIter=0, rho.max.f = 10)
generate_tv_graph(tempResult2)
compare_matching(tempResult2)
bal.tab(lalonde[,pairDistVal12], treat = as.vector(lalonde$treat))
generate_pairdistance_graph(tempResult2)
generate_pairdistance_balance_graph(tempResult2)
ex16 <- matched_data(tempResult2, 16)
ex7 <- matched_data(tempResult2, 7)
hist(ex10[ex16$z == 1, "ps"], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution for Matched Pairs",
xlim = c(0, 1), ylim = c(0, 5))
hist(ex16[ex16$z == 1, "ps"], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution for Matched Pairs",
xlim = c(0, 1), ylim = c(0, 5))
ps2 <- predict(glm(treat~age+educ+race+married,data=lalonde, family=binomial("logit")), type="response")
hist(ps2[ex16$z == 1], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution for Matched Pairs",
xlim = c(0, 1), ylim = c(0, 5))
ps2[ex16$z == 1]
tempResult2$matchList$`16`
hist(ps2[ex16$treat == 1], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution for Matched Pairs",
xlim = c(0, 1), ylim = c(0, 5))
hist(ps2[ex16$treat == 0], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
hist(ps2[lalonde$treat==1], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution",
xlim = c(0, 1), ylim = c(0, 5))
hist(ps2[lalonde$treat==0], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
hist(ps2[lalonde$treat==1], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution",
xlim = c(0, 1), ylim = c(0, 10))
hist(ps2[lalonde$treat==0], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
hist(ps2[lalonde$treat==1], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution",
xlim = c(0, 1), ylim = c(0, 12))
hist(ps2[lalonde$treat==0], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
hist(ps2[lalonde$treat==1], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution",
xlim = c(0, 1), ylim = c(0, 15))
hist(ps2[lalonde$treat==0], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
hist(ps2[ex7$treat == 1], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution for Matched Pairs",
xlim = c(0, 1), ylim = c(0, 5))
hist(ps2[ex7$treat == 0], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
hist(ps2[ex7$treat == 1], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution for Matched Pairs",
xlim = c(0, 1), ylim = c(0, 10))
hist(ps2[ex7$treat == 0], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
border = NA, xlab = "estimated propensity score",
hist(ps2[ex7$treat == 1], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution for Matched Pairs",
xlim = c(0, 1), ylim = c(0, 15))
hist(ps2[ex7$treat == 0], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
## Example Match 31: Propensity Score Examination
ex16 <- matched_data(tempResult2, 16)
ex7 <- matched_data(tempResult2, 7)
hist(ps2[ex16$treat == 1], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution for Matched Pairs",
xlim = c(0, 1), ylim = c(0, 15))
hist(ps2[ex16$treat == 0], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
hist(ps2[lalonde$treat==1], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution",
xlim = c(0, 1), ylim = c(0, 15))
hist(ps2[lalonde$treat==0], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
hist(ps2[ex7$treat == 1], freq = FALSE, col = "grey",
border = NA, xlab = "estimated propensity score",
ylab = "density",  breaks = 30,
main = "Propensity Score Distribution for Matched Pairs",
xlim = c(0, 1), ylim = c(0, 15))
hist(ps2[ex7$treat == 0], freq = FALSE,
add = TRUE, breaks = 30)
legend("topright", c("Treated", "Control"), fill=c("grey", "white"))
generate_pairdistance_graph(tempResult2)
setwd("~/Desktop/SHICHAO/College/MultiObjMatch/MultiObjMatch")
library(devtools)
load_all()
document()
library(MultiObjMatch)
help(generate_tv_graph)
help(multiObjMatch)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(survival)
set.seed(491)
t <- seq(0, 200, 0.01)
## pexp: gives cdf
S0 <- function(t) 1 - pexp(t, rate = 1/60)
Ht <- (1/60) * t
gg_S0 <- qplot(x = t, y = S0(t), geom="line") + ggtitle("True Survival Curve")
print(gg_S0)
G_0 <- function(t) pweibull(t, shape=2, scale=80)
gg_G0 <- qplot(x = t, y = G_0(t), geom = "line") + ggtitle("True Censoring CDF")
print(gg_G0)
T <- rexp(n = 1000, rate = 1/60)
C <- rweibull(n = 1000, shape = 2, scale = 80)
C <- ifelse(C > 100, 100, C)
Ttilde <- pmin(T,C)
Delta <- T <= C
T
Tilde
Ttilde
Ttilde
Delta
C
S_obj <- survival::Surv(time = Ttilde, event = Delta, type = "right")
km <- survival::survfit(formula = S_obj ~ 1, type = "kaplan-meier", conf.int = .95)
Event
S_obj
Delta
time
time
Ttilde
library(devtools)
install_github("ShichaoHan/MultiObjMatch")
install_github("ShichaoHan/MultiObjMatch")
help(generate_tv_graph)
library(MultiObjMatch)
library(MultiObjMatch)
help(generate_tv_graph)
library(devtools)
install_github("ShichaoHan/MultiObjMatch")
library(MultiObjMatch)
?multiObjMatch
?getUnmatched
library(devtools)
library(MultiObjMatch)
install_github("ShichaoHan/MultiObjMatch")
library(MultiObjMatch)
?multiObjMatch
library(MultiObjMatch)
?multiObjMatch
devtools::document()
library(MultiObjMatch)
?multiObjMatch
